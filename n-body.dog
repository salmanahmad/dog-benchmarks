
#### I was not sure how to represent tuples in Dog so whenever there is a tuple, pl. check over that portion ####

include dog

define combinations: 1 do
	result = []
	repeat length(1) -  do ######
		ls = l[x+1:] ####
		for each value in ls do
			result = result + ((1[x],y)) ###### result.append((1[x],y)) ######
		end
		return result
	end
end

PI = 3.14159265358979323
SOLAR_MASS = 4*PI*PI
DAYS_PER_YEAR = 365.24

BODIES = {'sun' = ([0.0,0.0,0.0],[0.0,0.0,0.0], SOLAR_MASS), 'jupiter' = ([4.84143144246472090e+00,
                 -1.16032004402742839e+00,
                 -1.03622044471123109e-01],
                [1.66007664274403694e-03 * DAYS_PER_YEAR,
                 7.69901118419740425e-03 * DAYS_PER_YEAR,
                 -6.90460016972063023e-05 * DAYS_PER_YEAR],
                9.54791938424326609e-04 * SOLAR_MASS), 'saturn' = ([8.34336671824457987e+00,
                4.12479856412430479e+00,
                -4.03523417114321381e-01],
               [-2.76742510726862411e-03 * DAYS_PER_YEAR,
                4.99852801234917238e-03 * DAYS_PER_YEAR,
                2.30417297573763929e-05 * DAYS_PER_YEAR],
               2.85885980666130812e-04 * SOLAR_MASS), 'uranus' = ([1.28943695621391310e+01,
                -1.51111514016986312e+01,
                -2.23307578892655734e-01],
               [2.96460137564761618e-03 * DAYS_PER_YEAR,
                2.37847173959480950e-03 * DAYS_PER_YEAR,
                -2.96589568540237556e-05 * DAYS_PER_YEAR],
               4.36624404335156298e-05 * SOLAR_MASS), 'neptune' = ([1.53796971148509165e+01,
                 -2.59193146099879641e+01,
                 1.79258772950371181e-01],
                [2.68067772490389322e-03 * DAYS_PER_YEAR,
                 1.62824170038242295e-03 * DAYS_PER_YEAR,
                 -9.51592254519715870e-05 * DAYS_PER_YEAR],
                5.15138902046611451e-05 * SOLAR_MASS) }}
SYSTEM = list: values: BODIES ### SYSTEM = list(BODIES.values()) ###
PAIRS = combinations: SYSTEM

define power: num1 to num2 do
	repeat num2 times do
		return num1*num1
	end
end

define advance: dt with n with bodies with pairs do
	bodies = SYSTEM
	pairs = PAIRS
	dx = 0
	dy = 0
	dz = 0
	repeat n times do
		for each (([x1,y1,z1],v1,m1),([x2,y2,z2],v2,m2)) in pairs do
			dx = x1-x2
			dy = y1-y2
			dz = z1-z2
			mag = dt*power:dx*dx+dy*dy+dz*dz) to (-1.5)
			b1m = m1*mag
			b2m = m2*mag
			v1[0] = v1[0]- (dx*b2m)
			v1[1] = v1[1] -(dy*b2m)
			v1[2] = v1[2] -(dz*b2m)
			v2[0] = v2[0]- (dx*b1m)
			v2[1] = v2[1] -(dy*b1m)
			v2[2] = v2[2] -(dz*b1m)
			for each (r,[vx,vy,vz], m) in bodies do
				r[0] =  r[0]+(dt * vx)
            	r[1] = r[1]+(dt * vy)
            	r[2] = r[2]+(dt * vz)
            end
        end
    end
end

define report_energy: bodies with pairs and e do
	pairs = PAIRS
	bodies = SYSTEM
	for each (((x1, y1, z1), v1, m1),((x2, y2, z2), v2, m2)) in pairs do
		dx = x1-x2
		dy = y1-y2
		dz = z1-z2
		e = e - (m1*m2/power: dx*dx+dy*dy+dz*dz to 0.5)
	end
	for each (r,[vx,vy,vz], m) in bodies do
		e = e+(m*(vx*vy+vy*vy+vz*vz)/2)
		print: ("%.9f" % e)
	end
end
define offset_momentum: ref and bodies and px and py and pz do
	bodies = SYSTEM
	px = 0.0
	py = 0.0
	pz = 0.0
	for each (r,[vx,vy,vz],m) in bodies do
		px = px - (vx*m)
		py = py - (vy*m)
		pz = pz - (vz*m)
	end
	(r,v,m) = ref
	v[0] = px/m
	v[1] = py/m
	v[2] = pz/m
end

define main: n and ref do
	ref = 'sun'
	offset_momentum: BODIES[ref] and SYSTEM and 0.0 and 0.0 and 0.0
	report_energy: SYSTEM with PAIRS and 0.0
	advance: 0.01 with n with SYSTEM with PAIRS
	report_energy: SYSTEM with PAIRS and 0.0
end

if __name__ == '__main__' then
	main: ## int(sys.argv[1]) ## 





